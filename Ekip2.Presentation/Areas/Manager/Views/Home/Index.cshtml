@using System.Security.Claims
@using Ekip2.Application.Services.AdvanceServices
@using Ekip2.Application.Services.ExpenseServices
@using Ekip2.Application.Services.LeaveService
@using Ekip2.Presentation.Areas.Employee.Models.EmployeeAdvanceVMs
@using Ekip2.Presentation.Areas.Employee.Models.EmployeeExpenseVMs
@using Ekip2.Presentation.Areas.Manager.Models.LeaveVMs
@inject IManagerService managerService;
@inject ILeaveTypeService leaveTypeService;
@inject IAdvanceService advanceService;
@inject ILeaveService leaveService;
@inject IExpenseService expenceService;
@{
    ViewData["Title"] = "Manager Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var loginManager = await managerService.GetByIdentityUserIdAsync(userId);
    var leaves = await leaveService.GetAllAsync();
    var advances = await advanceService.GetAllAsync();
    var managers = await managerService.GetAllAsync();
    var employees = managers.Data.Where(x => x.Roles == Ekip2.Domain.Enums.Roles.Employee).Where(x => x.CompanyId == loginManager.Data.CompanyId);
    var advanceVMs = advances.Data.Adapt<List<AdvanceListVM>>().Where(x => x.CompanyId == loginManager.Data.CompanyId);
    var leaveVMs = leaves.Data.Where(x => x.Manager.CompanyId == loginManager.Data.CompanyId).Adapt<List<LeaveListVM>>();
    var expenses = await expenceService.GetAllAsync();
    var expenseVMs = expenses.Data.Adapt<List<ExpenseListVM>>().Where(x => x.CompanyId == loginManager.Data.CompanyId);

    var expenseCountsByDay = expenseVMs
           .GroupBy(l => l.ExpenseDate.DayOfWeek)
           .Select(g => new { Day = g.Key, Count = g.Count() })
           .OrderBy(g => g.Day)
           .ToList();

    var expenseCounts = new Dictionary<string, int>
{
    { "Monday", 0 },
    { "Tuesday", 0 },
    { "Wednesday", 0 },
    { "Thursday", 0 },
    { "Friday", 0 },
    { "Saturday", 0 },
    { "Sunday", 0 }
};

    foreach (var item in expenseCountsByDay)
    {
        expenseCounts[item.Day.ToString()] = item.Count;
    }

    ViewBag.ExpenseCounts = expenseCounts;

    //
    var advanceCountsByDay = advanceVMs
    .GroupBy(l => l.AdvanceDate.DayOfWeek)
    .Select(g => new { Day = g.Key, Count = g.Count() })
    .OrderBy(g => g.Day)
    .ToList();

    var advanceCounts = new Dictionary<string, int>
{
    { "Monday", 0 },
    { "Tuesday", 0 },
    { "Wednesday", 0 },
    { "Thursday", 0 },
    { "Friday", 0 },
    { "Saturday", 0 },
    { "Sunday", 0 }
};

    foreach (var item in advanceCountsByDay)
    {
        advanceCounts[item.Day.ToString()] = item.Count;
    }

    ViewBag.AdvanceCounts = advanceCounts;
    //
    var leaveCountsByDay = leaveVMs
     .GroupBy(l => l.StartDate.DayOfWeek)
     .Select(g => new { Day = g.Key, Count = g.Count() })
     .OrderBy(g => g.Day)
     .ToList();

    var leaveCounts = new Dictionary<string, int>
{
    { "Monday", 0 },
    { "Tuesday", 0 },
    { "Wednesday", 0 },
    { "Thursday", 0 },
    { "Friday", 0 },
    { "Saturday", 0 },
    { "Sunday", 0 }
};

    foreach (var item in leaveCountsByDay)
    {
        leaveCounts[item.Day.ToString()] = item.Count;
    }

    ViewBag.LeaveCounts = leaveCounts;
}
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Skydash Admin</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="vendors/feather/feather.css">
    <link rel="stylesheet" href="vendors/ti-icons/css/themify-icons.css">
    <link rel="stylesheet" href="vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <link rel="stylesheet" href="vendors/datatables.net-bs4/dataTables.bootstrap4.css">
    <link rel="stylesheet" href="vendors/ti-icons/css/themify-icons.css">
    <link rel="stylesheet" type="text/css" href="js/select.dataTables.min.css">
    <link rel="stylesheet"href="~/css/dashboard.css">
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <link rel="stylesheet" href="css/vertical-layout-light/style.css">
    <!-- endinject -->
    <link rel="shortcut icon" href="images/favicon.png" />
    <link href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
    
</head>

@if (TempData["SuccessMessage"] != null)
{
    <div id="success-message" class="alert alert-success custom-alert">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div id="error-message" class="alert alert-danger custom-alert">
        @TempData["ErrorMessage"]
    </div>
}
<body>
    <div class="main-panel">
        <div class="content-wrapper">
            <!-- Cards Row -->

            <div class="row">
                <div class="col-md-6 grid-margin stretch-card">

                    <div class="card-people mt-auto">
                        <div class="row">
                            <div class="col-md-12 grid-margin">
                                <div class="row">
                                    <div class="col-12 col-xl-8 mb-4 mb-xl-0">
                                        <h3 class="font-weight-bold animated-heading">@Localizer["Welcome"] @loginManager.Data.FirstName</h3>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <img src="~/HomePage-Purple/assets/images/Inbox - Zero Inbox Animation.gif" alt="people">
                        <div class="weather-info">
                            <div class="d-flex">
                                <div>
                                    <br />
                                    <br />
                                    <br />
                                    <input id="searchBar" placeholder="Search City" type="text" />
                                    <br />
                                    <br />
                                    <h4 class="city"></h4>
                                    <h2 class="temp"><i class="icon-sun mr-2">--</i><sup>C</sup></h2>
                                    <div class="desc"></div>
                                    <div class="minmax"> --</div>
                                </div>
                                <div class="ml-2">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @* kartlar *@
                <div class="col-md-6 grid-margin transparent">
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <div class="row">
                        <div class="col-md-6 mb-4 stretch-card transparent">
                            <div class="card card-tale">
                                <div class="card-body">
                                    <div id="clock" class="digital-clock"></div>
                                    <div id="date" class="date"></div>

                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 mb-4 stretch-card transparent">
                            <div class="card card-dark-blue">
                                <div class="card-body">
                                    <p class="mb-4">Number of Employees</p>
                                    <p class="fs-30 mb-2">@employees.Count().ToString()</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-4 mb-lg-0 stretch-card transparent">
                            <div class="card card-light-blue">
                                <div class="card-body">
                                    <p class="mb-4">Total Leaves</p>
                                    <p class="fs-30 mb-2">@leaveVMs.Count()</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 stretch-card transparent">
                            <div class="card card-light-danger">
                                <div class="card-body">
                                    <p class="mb-4">Total Advances</p>
                                    <p class="fs-30 mb-2">@advanceVMs.Count()</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Detailed Reports -->
            <div class="container mt-4">
                <div class="row">
                    <!-- İlk Kart -->
                    <div class="col-md-6 mb-4">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h4 class="card-title">Leaves Start Dates</h4>
                                <canvas id="barChart" height="400"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- İkinci Kart -->
                    <div class="col-md-6 mb-4">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h4 class="card-title">Advance Dates</h4>
                                <canvas id="barChart2" height="400"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @* <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h4 class="card-title">Expenses Chart</h4>
                            <canvas id="lineChart" width="800" height="200"></canvas>

                        </div>
                    </div>
                </div>
            </div> *@

        </div>
    </div>


    <script>
        $(document).ready(function () {
            setTimeout(function () {
                $("#success-message").fadeOut("slow", function () {
                    $(this).remove();
                });
                $("#error-message").fadeOut("slow", function () {
                    $(this).remove();
                });
            }, 3000);
        });
    </script>
    <style>
        .custom-alert {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1050;
            width: auto;
            min-width: auto;
            max-width: auto;
        }
    </style>



    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        //date card js
        $(document).ready(function () {
            function formatDate(date) {
                var day = date.getDate();
                var month = date.getMonth() + 1; // January is 0!
                var year = date.getFullYear();
                if (day < 10) {
                    day = '0' + day;
                }
                if (month < 10) {
                    month = '0' + month;
                }
                return day + ' ' + month + ' ' + year;
            }
            var today = new Date();
            $('#currentDate').text(formatDate(today));
            $("#datepicker").datepicker({
                onSelect: function (dateText, inst) {
                    $('#currentDate').text(dateText);
                }
            }).hide();
            $('#calendarButton').click(function () {
                $('#datepicker').toggle();
            });
        });

        function updateTime() {
            var now = new Date();
            var hours = now.getHours().toString().padStart(2, '0');
            var minutes = now.getMinutes().toString().padStart(2, '0');
            var seconds = now.getSeconds().toString().padStart(2, '0');
            var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
            var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            var dayName = days[now.getDay()];
            var day = now.getDate().toString().padStart(2, '0');
            var month = months[now.getMonth()];
            var year = now.getFullYear();
            var timeString = hours + ':' + minutes;
            var dateString = dayName + ', ' + day + ' ' + month + ' ' + year;
            document.getElementById('clock').innerText = timeString;
            document.getElementById('date').innerText = dateString;
        }
        setInterval(updateTime, 1000);
        updateTime();


    </script>
    <script>
        const leaveCounts = @Html.Raw(JsonConvert.SerializeObject(ViewBag.LeaveCounts));

        const data = [
            { day: 'Monday', value: leaveCounts["Monday"] },
            { day: 'Tuesday', value: leaveCounts["Tuesday"] },
            { day: 'Wednesday', value: leaveCounts["Wednesday"] },
            { day: 'Thursday', value: leaveCounts["Thursday"] },
            { day: 'Friday', value: leaveCounts["Friday"] },
            { day: 'Saturday', value: leaveCounts["Saturday"] },
            { day: 'Sunday', value: leaveCounts["Sunday"] }
        ];

        const labels = data.map(item => item.day);
        const values = data.map(item => item.value);

        // Bar Chart oluşturma
        const ctx = document.getElementById('barChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Daily Values',
                    data: values,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
    <script>
        const advanceCounts = @Html.Raw(JsonConvert.SerializeObject(ViewBag.AdvanceCounts));

        const advanceData = [
            { day: 'Monday', value: advanceCounts["Monday"] },
            { day: 'Tuesday', value: advanceCounts["Tuesday"] },
            { day: 'Wednesday', value: advanceCounts["Wednesday"] },
            { day: 'Thursday', value: advanceCounts["Thursday"] },
            { day: 'Friday', value: advanceCounts["Friday"] },
            { day: 'Saturday', value: advanceCounts["Saturday"] },
            { day: 'Sunday', value: advanceCounts["Sunday"] }
        ];

        const advanceLabels = advanceData.map(item => item.day);
        const advanceValues = advanceData.map(item => item.value);

        // Advance Bar Chart oluşturma
        const ctx2 = document.getElementById('barChart2').getContext('2d');
        new Chart(ctx2, {
            type: 'line',
            data: {
                labels: advanceLabels,
                datasets: [{
                    label: 'Daily Values',
                    data: advanceValues,
                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1,
                    fill: true,
                    lineTension: 0.2
                }]
            },
            options: {
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
       <script>
        function updateWeatherImage() {
            const descElement = document.querySelector('.desc');
            const weatherImage = document.getElementById('weatherImage');
            const description = descElement.innerText.toLowerCase().trim();

            let imageUrl = '';

            if (description === 'sunny') {
                imageUrl = '~/HomePage-Purple/assets/images/sunny.png';
            } else if (description === 'cloudy') {
                imageUrl = '~/HomePage-Purple/assets/images/cloudy.png';
            } else if (description === 'rainy') {
                imageUrl = '~/HomePage-Purple/assets/images/rainy.png';
            } else {
                imageUrl = '~/HomePage-Purple/assets/images/default.png';
            }

            weatherImage.src = imageUrl;
        }

        // Call the function to set the initial image
        updateWeatherImage();
    </script>

    <script>
        //hava durumu api
        const apiKey = '1519087dc3ada1e87078f3ac8309d2bb';
        const url = 'https://api.openweathermap.org/data/2.5/weather';

        // Kullanıcının konumunu al
        const getLocation = () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition, showError);
            } else {
                console.error("Geolocation is not supported by this browser.");
            }
        };

        const showPosition = (position) => {
            const { latitude, longitude } = position.coords;
            getWeatherByCoords(latitude, longitude);
        };

        const showError = (error) => {
            console.error(`Geolocation error: ${error.message}`);
            document.querySelector('.city').innerText = 'Konum bilgisi alınamadı.';
            document.querySelector('.temp').innerText = '';
            document.querySelector('.desc').innerText = '';
            document.querySelector('.minmax').innerText = '';
        };

        // Koordinatlara göre hava durumunu al
        const getWeatherByCoords = (lat, lon) => {
            let query = `${url}?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric&lang=tr`;
            fetch(query)
                .then(response => response.json())
                .then(displayResult)
                .catch(error => {
                    console.error("API Error:", error);
                    document.querySelector('.city').innerText = 'Hava durumu bilgisi alınamadı.';
                    document.querySelector('.temp').innerText = '';
                    document.querySelector('.desc').innerText = '';
                    document.querySelector('.minmax').innerText = '';
                });
        };

        // Şehir adına göre hava durumunu al
        const getWeatherByCity = (cityName) => {
            let query = `${url}?q=${cityName}&appid=${apiKey}&units=metric&lang=tr`;
            fetch(query)
                .then(response => response.json())
                .then(displayResult)
                .catch(error => {
                    console.error("API Error:", error);
                    document.querySelector('.city').innerText = 'Hava durumu bilgisi alınamadı.';
                    document.querySelector('.temp').innerText = '';
                    document.querySelector('.desc').innerText = '';
                    document.querySelector('.minmax').innerText = '';
                });
        };

        const setQuery = (e) => {
            if (e.keyCode === 13) { // enter tuşu
                getWeatherByCity(searchBar.value);
            }
        };

        const displayResult = (result) => {
            if (result.cod !== 200) {
                console.error("API Response Error:", result.message);
                document.querySelector('.city').innerText = 'Hava durumu bilgisi alınamadı.';
                document.querySelector('.temp').innerText = '';
                document.querySelector('.desc').innerText = '';
                document.querySelector('.minmax').innerText = '';
                return;
            }

            let city = document.querySelector('.city');
            city.innerText = `${result.name}, ${result.sys.country}`;

            let temp = document.querySelector('.temp');
            temp.innerText = `${Math.round(result.main.temp)}°C`;

            let desc = document.querySelector('.desc');
            desc.innerText = result.weather[0].description.charAt(0).toUpperCase() + result.weather[0].description.slice(1);

            let minmax = document.querySelector('.minmax');
            minmax.innerText = `${Math.round(result.main.temp_min)}°C / ${Math.round(result.main.temp_max)}°C`;
        };

        const searchBar = document.getElementById('searchBar');
        searchBar.addEventListener('keypress', setQuery);

        // Sayfa yüklendiğinde kullanıcının konumunu al ve hava durumunu göster
        window.onload = getLocation;

    </script>

</body>


